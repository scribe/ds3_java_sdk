/*
 * *****************************************************************************
 *    Copyright 2014-2017 Spectra Logic Corporation. All Rights Reserved.
 *    Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *    this file except in compliance with the License. A copy of the License is located at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *    or in the "license" file accompanying this file.
 *    This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *    CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *    specific language governing permissions and limitations under the License.
 *  ****************************************************************************
 */

buildscript {
    ext.kotlin_version = '1.1.4-3'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "gradle.plugin.net.ossindex:ossindex-gradle-plugin:0.1.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
    }
}

allprojects {
    group = 'com.spectralogic.escapepod'
    version = '0.1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'net.ossindex.audit'

    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        maven {
            url 'http://dl.bintray.com/spectralogic/ds3'
        }
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
        compile "io.reactivex.rxjava2:rxkotlin:$rxkotlinVersion"
        compile "com.google.guava:guava:$guavaVersion"
        compile "com.google.inject:guice:$guiceVersion"
        compile "com.google.inject.extensions:guice-assistedinject:$guiceVersion"
        compile group: 'org.slf4j', name: 'slf4j-api', version: "$slf4jVersion"
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlincoroutineVersion"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-nio:$kotlincoroutineVersion"
        compile group: 'io.opentracing', name: 'opentracing-api', version: "$opentracingVersion"
        compile "io.vavr:vavr:$vavrVersion"
        compile "io.vavr:vavr-jackson:$vavrVersion"

        testCompile group: 'org.slf4j', name: 'slf4j-simple', version: "$slf4jVersion"
        testCompile "junit:junit:$junitVersion"
        testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.assertj:assertj-core:$assertjVersion"
        testCompile group: 'io.opentracing', name: 'opentracing-mock', version: "$opentracingVersion"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
      kotlinOptions {
        jvmTarget = "1.8"
      }
    }
}

task unit(dependsOn: [':util:test', ':hazelcast:test', ':api:test', ':xoduspersistence:test', ':runner:test', ':ratpack:test', ':deviceregistry:test', ':xoduspersistence:test']) {
    doLast {
        println "Finished processing unit tests"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

project (":api") {
    dependencies {
        compile project(":util")
    }
}
project(":localcache") {
    dependencies {
        compile project(":api")
    }
}

project(":planner") {
    dependencies {
        compile project(":api")
    }
}

project(":xoduspersistence") {
    dependencies {
        compile project(":api")
        compile project(":util")
    }
}

project(":hazelcast") {
    dependencies {
        compile project(":api")
        compile project(":httpservice")
        testCompile project(":testutils")
    }
}

project(":migrate") {
    dependencies {
        compile project(":api")
        compile project(":divaclient")
        compile project(":avidmamclient")
    }
}

project(":divaclient") {
    dependencies {
        compile project(":api")
        compile project(":restclientutils")
    }
}

project(":flashnetclient") {
    dependencies {
        compile project(":api")
        compile project(":restclientutils")
    }
}

project(":avidmamclient") {
    dependencies {
        compile project(":api")
        compile project(":restclientutils")
    }
}

project(":restclientutils") {
    dependencies {
        compile project(":util")
    }
}

project(":runner") {
    dependencies {
        compile project(":api")
        compile project(":hazelcast")
        compile project(":localcache")
        compile project(":scheduler")
        compile project(":xoduspersistence")
	compile project(":metadatasearch")
	compile project(":ratpack")
    }
}

project(":scheduler") {
    dependencies {
        compile project(":api")
    }
}

project(":metadatasearch") {
    dependencies {
        compile project(":api")
        compile project(":util")
    }
}

project(":httpservice") {
    dependencies {
        compile project(":api")
    }
}

project(":ratpack") {
    dependencies {
        compile project(":api")
        compile project(":httpservice")
    }
}

project(":deviceregistry") {
    dependencies {
        compile project(":api")
        compile project(":util")
    }
}
